/**
 * Copyright (c) 2015 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * Contributors:
 *    Obeo - initial API and implementation
 */
package org.eclipse.sirius.tests.sample.scxml.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.sirius.tests.sample.scxml.util.ScxmlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScxmlItemProviderAdapterFactory extends ScxmlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ScxmlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlAssignType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlAssignTypeItemProvider scxmlAssignTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlAssignType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlAssignTypeAdapter() {
		if (scxmlAssignTypeItemProvider == null) {
			scxmlAssignTypeItemProvider = new ScxmlAssignTypeItemProvider(this);
		}

		return scxmlAssignTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlCancelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlCancelTypeItemProvider scxmlCancelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlCancelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlCancelTypeAdapter() {
		if (scxmlCancelTypeItemProvider == null) {
			scxmlCancelTypeItemProvider = new ScxmlCancelTypeItemProvider(this);
		}

		return scxmlCancelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlContentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlContentTypeItemProvider scxmlContentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlContentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlContentTypeAdapter() {
		if (scxmlContentTypeItemProvider == null) {
			scxmlContentTypeItemProvider = new ScxmlContentTypeItemProvider(this);
		}

		return scxmlContentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlDatamodelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlDatamodelTypeItemProvider scxmlDatamodelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlDatamodelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlDatamodelTypeAdapter() {
		if (scxmlDatamodelTypeItemProvider == null) {
			scxmlDatamodelTypeItemProvider = new ScxmlDatamodelTypeItemProvider(this);
		}

		return scxmlDatamodelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlDataTypeItemProvider scxmlDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlDataTypeAdapter() {
		if (scxmlDataTypeItemProvider == null) {
			scxmlDataTypeItemProvider = new ScxmlDataTypeItemProvider(this);
		}

		return scxmlDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlDonedataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlDonedataTypeItemProvider scxmlDonedataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlDonedataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlDonedataTypeAdapter() {
		if (scxmlDonedataTypeItemProvider == null) {
			scxmlDonedataTypeItemProvider = new ScxmlDonedataTypeItemProvider(this);
		}

		return scxmlDonedataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlElseifType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlElseifTypeItemProvider scxmlElseifTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlElseifType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlElseifTypeAdapter() {
		if (scxmlElseifTypeItemProvider == null) {
			scxmlElseifTypeItemProvider = new ScxmlElseifTypeItemProvider(this);
		}

		return scxmlElseifTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlElseType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlElseTypeItemProvider scxmlElseTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlElseType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlElseTypeAdapter() {
		if (scxmlElseTypeItemProvider == null) {
			scxmlElseTypeItemProvider = new ScxmlElseTypeItemProvider(this);
		}

		return scxmlElseTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlFinalizeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlFinalizeTypeItemProvider scxmlFinalizeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlFinalizeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlFinalizeTypeAdapter() {
		if (scxmlFinalizeTypeItemProvider == null) {
			scxmlFinalizeTypeItemProvider = new ScxmlFinalizeTypeItemProvider(this);
		}

		return scxmlFinalizeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlFinalType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlFinalTypeItemProvider scxmlFinalTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlFinalType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlFinalTypeAdapter() {
		if (scxmlFinalTypeItemProvider == null) {
			scxmlFinalTypeItemProvider = new ScxmlFinalTypeItemProvider(this);
		}

		return scxmlFinalTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlForeachType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlForeachTypeItemProvider scxmlForeachTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlForeachType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlForeachTypeAdapter() {
		if (scxmlForeachTypeItemProvider == null) {
			scxmlForeachTypeItemProvider = new ScxmlForeachTypeItemProvider(this);
		}

		return scxmlForeachTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlHistoryType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlHistoryTypeItemProvider scxmlHistoryTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlHistoryType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlHistoryTypeAdapter() {
		if (scxmlHistoryTypeItemProvider == null) {
			scxmlHistoryTypeItemProvider = new ScxmlHistoryTypeItemProvider(this);
		}

		return scxmlHistoryTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlIfType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlIfTypeItemProvider scxmlIfTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlIfType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlIfTypeAdapter() {
		if (scxmlIfTypeItemProvider == null) {
			scxmlIfTypeItemProvider = new ScxmlIfTypeItemProvider(this);
		}

		return scxmlIfTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlInitialType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlInitialTypeItemProvider scxmlInitialTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlInitialType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlInitialTypeAdapter() {
		if (scxmlInitialTypeItemProvider == null) {
			scxmlInitialTypeItemProvider = new ScxmlInitialTypeItemProvider(this);
		}

		return scxmlInitialTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlInvokeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlInvokeTypeItemProvider scxmlInvokeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlInvokeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlInvokeTypeAdapter() {
		if (scxmlInvokeTypeItemProvider == null) {
			scxmlInvokeTypeItemProvider = new ScxmlInvokeTypeItemProvider(this);
		}

		return scxmlInvokeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlLogType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlLogTypeItemProvider scxmlLogTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlLogType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlLogTypeAdapter() {
		if (scxmlLogTypeItemProvider == null) {
			scxmlLogTypeItemProvider = new ScxmlLogTypeItemProvider(this);
		}

		return scxmlLogTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlOnentryType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlOnentryTypeItemProvider scxmlOnentryTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlOnentryType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlOnentryTypeAdapter() {
		if (scxmlOnentryTypeItemProvider == null) {
			scxmlOnentryTypeItemProvider = new ScxmlOnentryTypeItemProvider(this);
		}

		return scxmlOnentryTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlOnexitType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlOnexitTypeItemProvider scxmlOnexitTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlOnexitType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlOnexitTypeAdapter() {
		if (scxmlOnexitTypeItemProvider == null) {
			scxmlOnexitTypeItemProvider = new ScxmlOnexitTypeItemProvider(this);
		}

		return scxmlOnexitTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlParallelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlParallelTypeItemProvider scxmlParallelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlParallelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlParallelTypeAdapter() {
		if (scxmlParallelTypeItemProvider == null) {
			scxmlParallelTypeItemProvider = new ScxmlParallelTypeItemProvider(this);
		}

		return scxmlParallelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlParamType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlParamTypeItemProvider scxmlParamTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlParamType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlParamTypeAdapter() {
		if (scxmlParamTypeItemProvider == null) {
			scxmlParamTypeItemProvider = new ScxmlParamTypeItemProvider(this);
		}

		return scxmlParamTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlRaiseType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlRaiseTypeItemProvider scxmlRaiseTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlRaiseType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlRaiseTypeAdapter() {
		if (scxmlRaiseTypeItemProvider == null) {
			scxmlRaiseTypeItemProvider = new ScxmlRaiseTypeItemProvider(this);
		}

		return scxmlRaiseTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlScriptType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlScriptTypeItemProvider scxmlScriptTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlScriptType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlScriptTypeAdapter() {
		if (scxmlScriptTypeItemProvider == null) {
			scxmlScriptTypeItemProvider = new ScxmlScriptTypeItemProvider(this);
		}

		return scxmlScriptTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlScxmlType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlScxmlTypeItemProvider scxmlScxmlTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlScxmlType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlScxmlTypeAdapter() {
		if (scxmlScxmlTypeItemProvider == null) {
			scxmlScxmlTypeItemProvider = new ScxmlScxmlTypeItemProvider(this);
		}

		return scxmlScxmlTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlSendType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlSendTypeItemProvider scxmlSendTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlSendType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlSendTypeAdapter() {
		if (scxmlSendTypeItemProvider == null) {
			scxmlSendTypeItemProvider = new ScxmlSendTypeItemProvider(this);
		}

		return scxmlSendTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlStateType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlStateTypeItemProvider scxmlStateTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlStateType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlStateTypeAdapter() {
		if (scxmlStateTypeItemProvider == null) {
			scxmlStateTypeItemProvider = new ScxmlStateTypeItemProvider(this);
		}

		return scxmlStateTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.tests.sample.scxml.ScxmlTransitionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScxmlTransitionTypeItemProvider scxmlTransitionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.tests.sample.scxml.ScxmlTransitionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScxmlTransitionTypeAdapter() {
		if (scxmlTransitionTypeItemProvider == null) {
			scxmlTransitionTypeItemProvider = new ScxmlTransitionTypeItemProvider(this);
		}

		return scxmlTransitionTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (scxmlAssignTypeItemProvider != null) scxmlAssignTypeItemProvider.dispose();
		if (scxmlCancelTypeItemProvider != null) scxmlCancelTypeItemProvider.dispose();
		if (scxmlContentTypeItemProvider != null) scxmlContentTypeItemProvider.dispose();
		if (scxmlDatamodelTypeItemProvider != null) scxmlDatamodelTypeItemProvider.dispose();
		if (scxmlDataTypeItemProvider != null) scxmlDataTypeItemProvider.dispose();
		if (scxmlDonedataTypeItemProvider != null) scxmlDonedataTypeItemProvider.dispose();
		if (scxmlElseifTypeItemProvider != null) scxmlElseifTypeItemProvider.dispose();
		if (scxmlElseTypeItemProvider != null) scxmlElseTypeItemProvider.dispose();
		if (scxmlFinalizeTypeItemProvider != null) scxmlFinalizeTypeItemProvider.dispose();
		if (scxmlFinalTypeItemProvider != null) scxmlFinalTypeItemProvider.dispose();
		if (scxmlForeachTypeItemProvider != null) scxmlForeachTypeItemProvider.dispose();
		if (scxmlHistoryTypeItemProvider != null) scxmlHistoryTypeItemProvider.dispose();
		if (scxmlIfTypeItemProvider != null) scxmlIfTypeItemProvider.dispose();
		if (scxmlInitialTypeItemProvider != null) scxmlInitialTypeItemProvider.dispose();
		if (scxmlInvokeTypeItemProvider != null) scxmlInvokeTypeItemProvider.dispose();
		if (scxmlLogTypeItemProvider != null) scxmlLogTypeItemProvider.dispose();
		if (scxmlOnentryTypeItemProvider != null) scxmlOnentryTypeItemProvider.dispose();
		if (scxmlOnexitTypeItemProvider != null) scxmlOnexitTypeItemProvider.dispose();
		if (scxmlParallelTypeItemProvider != null) scxmlParallelTypeItemProvider.dispose();
		if (scxmlParamTypeItemProvider != null) scxmlParamTypeItemProvider.dispose();
		if (scxmlRaiseTypeItemProvider != null) scxmlRaiseTypeItemProvider.dispose();
		if (scxmlScriptTypeItemProvider != null) scxmlScriptTypeItemProvider.dispose();
		if (scxmlScxmlTypeItemProvider != null) scxmlScxmlTypeItemProvider.dispose();
		if (scxmlSendTypeItemProvider != null) scxmlSendTypeItemProvider.dispose();
		if (scxmlStateTypeItemProvider != null) scxmlStateTypeItemProvider.dispose();
		if (scxmlTransitionTypeItemProvider != null) scxmlTransitionTypeItemProvider.dispose();
	}

}
